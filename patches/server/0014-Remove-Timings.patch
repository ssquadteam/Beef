From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Sat, 23 Sep 2023 03:12:14 -0400
Subject: [PATCH] Remove Timings

Completely remove the Timings, since it wastes too much performance. Use Spark instead.

diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
deleted file mode 100644
index 6b3cde6d4d1e63bec01f502f2027ee9fddac08aa..0000000000000000000000000000000000000000
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ /dev/null
@@ -1,178 +0,0 @@
-package co.aikar.timings;
-
-import com.google.common.collect.MapMaker;
-import io.papermc.paper.configuration.GlobalConfiguration;
-import net.minecraft.commands.functions.CommandFunction;
-import net.minecraft.network.protocol.Packet;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.scheduler.BukkitTask;
-
-import org.bukkit.craftbukkit.scheduler.CraftTask;
-
-import java.util.Map;
-
-// TODO: Re-implement missing timers
-@Deprecated(forRemoval = true)
-public final class MinecraftTimings {
-
-    public static final Timing serverOversleep = Timings.ofSafe("Server Oversleep");
-    public static final Timing playerListTimer = Timings.ofSafe("Player List");
-    public static final Timing commandFunctionsTimer = Timings.ofSafe("Command Functions");
-    public static final Timing connectionTimer = Timings.ofSafe("Connection Handler");
-    public static final Timing tickablesTimer = Timings.ofSafe("Tickables");
-    public static final Timing minecraftSchedulerTimer = Timings.ofSafe("Minecraft Scheduler");
-    public static final Timing bukkitSchedulerTimer = Timings.ofSafe("Bukkit Scheduler");
-    public static final Timing bukkitSchedulerPendingTimer = Timings.ofSafe("Bukkit Scheduler - Pending");
-    public static final Timing bukkitSchedulerFinishTimer = Timings.ofSafe("Bukkit Scheduler - Finishing");
-    public static final Timing chunkIOTickTimer = Timings.ofSafe("ChunkIOTick");
-    public static final Timing timeUpdateTimer = Timings.ofSafe("Time Update");
-    public static final Timing serverCommandTimer = Timings.ofSafe("Server Command");
-    public static final Timing savePlayers = Timings.ofSafe("Save Players");
-
-    public static final Timing tickEntityTimer = Timings.ofSafe("## tickEntity");
-    public static final Timing tickTileEntityTimer = Timings.ofSafe("## tickTileEntity");
-    public static final Timing packetProcessTimer = Timings.ofSafe("## Packet Processing");
-    public static final Timing scheduledBlocksTimer = Timings.ofSafe("## Scheduled Blocks");
-    public static final Timing structureGenerationTimer = Timings.ofSafe("Structure Generation");
-
-    public static final Timing processQueueTimer = Timings.ofSafe("processQueue");
-    public static final Timing processTasksTimer = Timings.ofSafe("processTasks");
-
-    public static final Timing playerCommandTimer = Timings.ofSafe("playerCommand");
-
-    public static final Timing entityActivationCheckTimer = Timings.ofSafe("entityActivationCheck");
-
-    public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
-    public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
-    public static final Timing scoreboardScoreSearch = Timings.ofSafe("Scoreboard score search"); // Paper - add timings for scoreboard search
-
-    private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
-
-    private MinecraftTimings() {}
-
-    public static Timing getInternalTaskName(String taskName) {
-        return Timings.ofSafe(taskName);
-    }
-
-    /**
-     * Gets a timer associated with a plugins tasks.
-     * @param bukkitTask
-     * @param period
-     * @return
-     */
-    public static Timing getPluginTaskTimings(BukkitTask bukkitTask, long period) {
-        if (!bukkitTask.isSync()) {
-            return NullTimingHandler.NULL;
-        }
-        Plugin plugin;
-
-        CraftTask craftTask = (CraftTask) bukkitTask;
-
-        final Class<?> taskClass = craftTask.getTaskClass();
-        if (bukkitTask.getOwner() != null) {
-            plugin = bukkitTask.getOwner();
-        } else {
-            plugin = TimingsManager.getPluginByClassloader(taskClass);
-        }
-
-        final String taskname = taskNameCache.computeIfAbsent(taskClass, clazz -> {
-            try {
-                String clsName = !clazz.isMemberClass()
-                    ? clazz.getName()
-                    : clazz.getCanonicalName();
-                if (clsName != null && clsName.contains("$Lambda$")) {
-                    clsName = clsName.replaceAll("(Lambda\\$.*?)/.*", "$1");
-                }
-                return clsName != null ? clsName : "UnknownTask";
-            } catch (Throwable ex) {
-                new Exception("Error occurred detecting class name", ex).printStackTrace();
-                return "MangledClassFile";
-            }
-        });
-
-        StringBuilder name = new StringBuilder(64);
-        name.append("Task: ").append(taskname);
-        if (period > 0) {
-            name.append(" (interval:").append(period).append(")");
-        } else {
-            name.append(" (Single)");
-        }
-
-        if (plugin == null) {
-            return Timings.ofSafe(null, name.toString());
-        }
-
-        return Timings.ofSafe(plugin, name.toString());
-    }
-
-    /**
-     * Get a named timer for the specified entity type to track type specific timings.
-     * @param entityType
-     * @return
-     */
-    public static Timing getEntityTimings(String entityType, String type) {
-        return Timings.ofSafe("Minecraft", "## tickEntity - " + entityType + " - " + type, tickEntityTimer);
-    }
-
-    public static Timing getBehaviorTimings(String type) {
-        return Timings.ofSafe("## Behavior - " + type);
-    }
-
-    public static Timing getSensorTimings(String type, int rate) {
-        return Timings.ofSafe("## Sensor - " + type + " (Default rate: " + rate + ")");
-    }
-
-    /**
-     * Get a named timer for the specified tile entity type to track type specific timings.
-     * @param entity
-     * @return
-     */
-    public static Timing getTileEntityTimings(BlockEntity entity) {
-        String entityType = entity.getClass().getName();
-        return Timings.ofSafe("Minecraft", "## tickTileEntity - " + entityType, tickTileEntityTimer);
-    }
-    public static Timing getCancelTasksTimer() {
-        return Timings.ofSafe("Cancel Tasks");
-    }
-    public static Timing getCancelTasksTimer(Plugin plugin) {
-        return Timings.ofSafe(plugin, "Cancel Tasks");
-    }
-
-    public static void stopServer() {
-        TimingsManager.stopServer();
-    }
-
-    public static Timing getBlockTiming(Block block) {
-        return Timings.ofSafe("## Scheduled Block: " + block.toString(), scheduledBlocksTimer);
-    }
-/*
-    public static Timing getStructureTiming(StructureGenerator structureGenerator) {
-        return Timings.ofSafe("Structure Generator - " + structureGenerator.getName(), structureGenerationTimer);
-    }*/
-
-    public static Timing getPacketTiming(Packet packet) {
-        return Timings.ofSafe("## Packet - " + packet.getClass().getName(), packetProcessTimer);
-    }
-
-    public static Timing getCommandFunctionTiming(CommandFunction<?> function) {
-        return Timings.ofSafe("Command Function - " + function.id());
-    }
-
-    public static void processConfig(GlobalConfiguration.Timings config) {
-        TimingsManager.url = config.url;
-        if (!TimingsManager.url.endsWith("/")) {
-            TimingsManager.url += "/";
-        }
-        TimingsManager.privacy = config.serverNamePrivacy;
-        if (!config.hiddenConfigEntries.contains("proxies.velocity.secret")) {
-            config.hiddenConfigEntries.add("proxies.velocity.secret");
-        }
-        TimingsManager.hiddenConfigs.addAll(config.hiddenConfigEntries);
-        co.aikar.timings.Timings.setVerboseTimingsEnabled(config.verbose);
-        co.aikar.timings.Timings.setTimingsEnabled(config.enabled);
-        co.aikar.timings.Timings.setHistoryInterval(config.historyInterval * 20);
-        co.aikar.timings.Timings.setHistoryLength(config.historyLength * 20);
-    }
-}
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
deleted file mode 100644
index 429cff43a9f0c74161fdab857f5d45771f774ac2..0000000000000000000000000000000000000000
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ /dev/null
@@ -1,450 +0,0 @@
-/*
- * This file is licensed under the MIT License (MIT).
- *
- * Copyright (c) 2014 Daniel Ennis <http://aikar.co>
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-package co.aikar.timings;
-
-import com.google.common.collect.Sets;
-import io.papermc.paper.adventure.PaperAdventure;
-import net.kyori.adventure.text.event.ClickEvent;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
-import net.minecraft.server.MinecraftServer;
-import org.apache.commons.lang.StringUtils;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.MemorySection;
-import org.bukkit.entity.EntityType;
-import org.galemc.gale.configuration.GaleGlobalConfiguration;
-import org.galemc.gale.configuration.timingsexport.VanillaServerPropertiesTimingsExport;
-import org.json.simple.JSONObject;
-import org.json.simple.JSONValue;
-import oshi.SystemInfo;
-import oshi.hardware.HardwareAbstractionLayer;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.lang.management.ManagementFactory;
-import java.lang.management.OperatingSystemMXBean;
-import java.lang.management.RuntimeMXBean;
-import java.net.HttpURLConnection;
-import java.net.InetAddress;
-import java.net.URL;
-import java.util.Arrays;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.logging.Level;
-import java.util.zip.GZIPOutputStream;
-
-import static co.aikar.timings.TimingsManager.HISTORY;
-import static co.aikar.util.JSONUtil.appendObjectData;
-import static co.aikar.util.JSONUtil.createObject;
-import static co.aikar.util.JSONUtil.pair;
-import static co.aikar.util.JSONUtil.toArray;
-import static co.aikar.util.JSONUtil.toArrayMapper;
-import static co.aikar.util.JSONUtil.toObjectMapper;
-import static net.kyori.adventure.text.Component.text;
-
-@SuppressWarnings({"rawtypes", "SuppressionAnnotation"})
-@Deprecated(forRemoval = true)
-public class TimingsExport extends Thread {
-
-    private final TimingsReportListener listeners;
-    private final Map out;
-    private final TimingHistory[] history;
-    private static long lastReport = 0;
-
-    private TimingsExport(TimingsReportListener listeners, Map out, TimingHistory[] history) {
-        super("Timings paste thread");
-        this.listeners = listeners;
-        this.out = out;
-        this.history = history;
-    }
-
-    /**
-     * Checks if any pending reports are being requested, and builds one if needed.
-     */
-    public static void reportTimings() {
-        if (Timings.requestingReport.isEmpty()) {
-            return;
-        }
-        TimingsReportListener listeners = new TimingsReportListener(Timings.requestingReport);
-        listeners.addConsoleIfNeeded();
-
-        Timings.requestingReport.clear();
-        long now = System.currentTimeMillis();
-        final long lastReportDiff = now - lastReport;
-        if (lastReportDiff < 60000) {
-            listeners.sendMessage(text("Please wait at least 1 minute in between Timings reports. (" + (int)((60000 - lastReportDiff) / 1000) + " seconds)", NamedTextColor.RED));
-            listeners.done();
-            return;
-        }
-        final long lastStartDiff = now - TimingsManager.timingStart;
-        if (lastStartDiff < 180000) {
-            listeners.sendMessage(text("Please wait at least 3 minutes before generating a Timings report. Unlike Timings v1, v2 benefits from longer timings and is not as useful with short timings. (" + (int)((180000 - lastStartDiff) / 1000) + " seconds)", NamedTextColor.RED));
-            listeners.done();
-            return;
-        }
-        listeners.sendMessage(text("Preparing Timings Report...", NamedTextColor.GREEN));
-        lastReport = now;
-        Map parent = createObject(
-            // Get some basic system details about the server
-            pair("version", Bukkit.getVersion()),
-            pair("maxplayers", Bukkit.getMaxPlayers()),
-            pair("start", TimingsManager.timingStart / 1000),
-            pair("end", System.currentTimeMillis() / 1000),
-            pair("online-mode", Bukkit.getServer().getOnlineMode()),
-            pair("sampletime", (System.currentTimeMillis() - TimingsManager.timingStart) / 1000),
-            pair("datapacks", toArrayMapper(MinecraftServer.getServer().getPackRepository().getSelectedPacks(), pack -> {
-                return PlainTextComponentSerializer.plainText().serialize(PaperAdventure.asAdventure(pack.getChatLink(true)));
-            }))
-        );
-        if (!TimingsManager.privacy) {
-            appendObjectData(parent,
-                pair("server", Bukkit.getUnsafe().getTimingsServerName()),
-                pair("motd", Bukkit.getServer().getMotd()),
-                pair("icon", Bukkit.getServer().getServerIcon().getData())
-            );
-        }
-
-        final Runtime runtime = Runtime.getRuntime();
-        RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean();
-
-        OperatingSystemMXBean osInfo = ManagementFactory.getOperatingSystemMXBean();
-
-        HardwareAbstractionLayer hardwareInfo = new SystemInfo().getHardware();
-
-        // Gale start - include hardware specs in timings
-        var processor = hardwareInfo.getProcessor();
-        var processorIdentifier = processor.getProcessorIdentifier();
-        var memory = hardwareInfo.getMemory();
-
-        Map<String, Object> hardwareSpecsMap = new LinkedHashMap<>();
-        if (GaleGlobalConfiguration.get().misc.includeInTimingsReport.hardwareSpecs.cpu) {
-            hardwareSpecsMap.put("cpu", createObject(
-                pair("logicalprocessorcount", processor.getLogicalProcessorCount()),
-                pair("physicalprocessorcount", processor.getPhysicalProcessorCount()),
-                pair("physicalpackagecount", processor.getPhysicalPackageCount()),
-                pair("contextswitches", processor.getContextSwitches()),
-                pair("interrupts", processor.getInterrupts()),
-                pair("maxfreq", processor.getMaxFreq()),
-                pair("currentfreq", Arrays.toString(processor.getCurrentFreq())),
-                pair("identifier", createObject(
-                    pair("vendor", String.valueOf(processorIdentifier.getVendor()).trim()),
-                    pair("name", String.valueOf(processorIdentifier.getName()).trim()),
-                    pair("family", String.valueOf(processorIdentifier.getFamily()).trim()),
-                    pair("model", String.valueOf(processorIdentifier.getModel()).trim()),
-                    pair("vendor", String.valueOf(processorIdentifier.getVendor()).trim()),
-                    pair("cpu64bit", processorIdentifier.isCpu64bit()),
-                    pair("vendorfreq", processorIdentifier.getVendorFreq()),
-                    pair("microarchitecture", String.valueOf(processorIdentifier.getMicroarchitecture()).trim())
-                ))
-            ));
-        }
-        if (GaleGlobalConfiguration.get().misc.includeInTimingsReport.hardwareSpecs.disks) {
-            hardwareSpecsMap.put("diskstores", toArrayMapper(hardwareInfo.getDiskStores(), disk -> createObject(
-                pair("name", String.valueOf(disk.getName()).trim()),
-                pair("model", String.valueOf(disk.getModel()).trim()),
-                pair("serial", String.valueOf(disk.getSerial()).trim()),
-                pair("size", disk.getSize())
-            )));
-        }
-        if (GaleGlobalConfiguration.get().misc.includeInTimingsReport.hardwareSpecs.gpus) {
-            hardwareSpecsMap.put("gpus", toArrayMapper(hardwareInfo.getGraphicsCards(), gpu -> createObject(
-                pair("name", String.valueOf(gpu.getName()).trim()),
-                pair("deviceid", String.valueOf(gpu.getDeviceId()).trim()),
-                pair("vendor", String.valueOf(gpu.getVendor()).trim()),
-                pair("versioninfo", String.valueOf(gpu.getVersionInfo()).trim()),
-                pair("vram", gpu.getVRam())
-            )));
-        }
-        if (GaleGlobalConfiguration.get().misc.includeInTimingsReport.hardwareSpecs.memory) {
-            hardwareSpecsMap.put("memory", createObject(
-                pair("total", memory.getTotal()),
-                pair("available", memory.getAvailable()),
-                pair("pagesize", memory.getPageSize())
-            ));
-        }
-        // Gale end - include hardware specs in timings
-
-        parent.put("system", createObject(
-                pair("timingcost", getCost()),
-                pair("loadavg", osInfo.getSystemLoadAverage()),
-                pair("name", System.getProperty("os.name")),
-                pair("version", System.getProperty("os.version")),
-                pair("jvmversion", System.getProperty("java.version")),
-                pair("jvmvendor", System.getProperty("java.vendor")),
-                pair("jvmvendorversion", System.getProperty("java.vendor.version")),
-                pair("arch", System.getProperty("os.arch")),
-                pair("maxmem", runtime.maxMemory()),
-                pair("memory", createObject(
-                    pair("heap", ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().toString()),
-                    pair("nonheap", ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage().toString()),
-                    pair("finalizing", ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount())
-                )),
-                pair("cpu", runtime.availableProcessors()),
-                pair("cpuname", hardwareInfo.getProcessor().getProcessorIdentifier().getName().trim()),
-                pair("hardwarespecs", hardwareSpecsMap), // Gale - include hardware specs in timings
-                pair("runtime", runtimeBean.getUptime()),
-                pair("flags", StringUtils.join(runtimeBean.getInputArguments(), " ")),
-                pair("gc", toObjectMapper(ManagementFactory.getGarbageCollectorMXBeans(), input -> pair(input.getName(), toArray(input.getCollectionCount(), input.getCollectionTime()))))
-            )
-        );
-
-        parent.put("worlds", toObjectMapper(MinecraftServer.getServer().getAllLevels(), world -> {
-            if (world.getWorld().getName().equals("worldeditregentempworld")) return null;
-            return pair(world.getWorld().getName(), createObject(
-                pair("gamerules", toObjectMapper(world.getWorld().getGameRules(), rule -> {
-                    return pair(rule, world.getWorld().getGameRuleValue(rule));
-                })),
-                pair("ticking-distance", world.getWorld().getSimulationDistance()),
-                pair("no-ticking-distance", world.getWorld().getViewDistance()),
-                pair("sending-distance", world.getWorld().getSendViewDistance())
-            ));
-        }));
-
-        Set<Material> tileEntityTypeSet = Sets.newHashSet();
-        Set<EntityType> entityTypeSet = Sets.newHashSet();
-
-        int size = HISTORY.size();
-        TimingHistory[] history = new TimingHistory[size + 1];
-        int i = 0;
-        for (TimingHistory timingHistory : HISTORY) {
-            tileEntityTypeSet.addAll(timingHistory.tileEntityTypeSet);
-            entityTypeSet.addAll(timingHistory.entityTypeSet);
-            history[i++] = timingHistory;
-        }
-
-        history[i] = new TimingHistory(); // Current snapshot
-        tileEntityTypeSet.addAll(history[i].tileEntityTypeSet);
-        entityTypeSet.addAll(history[i].entityTypeSet);
-
-
-        Map handlers = createObject();
-        Map groupData;
-        synchronized (TimingIdentifier.GROUP_MAP) {
-            for (TimingIdentifier.TimingGroup group : TimingIdentifier.GROUP_MAP.values()) {
-                synchronized (group.handlers) {
-                    for (TimingHandler id : group.handlers) {
-
-                        if (!id.isTimed() && !id.isSpecial()) {
-                            continue;
-                        }
-
-                        String name = id.identifier.name;
-                        if (name.startsWith("##")) {
-                            name = name.substring(3);
-                        }
-                        handlers.put(id.id, toArray(
-                            group.id,
-                            name
-                        ));
-                    }
-                }
-            }
-
-            groupData = toObjectMapper(
-                TimingIdentifier.GROUP_MAP.values(), group -> pair(group.id, group.name));
-        }
-
-        parent.put("idmap", createObject(
-            pair("groups", groupData),
-            pair("handlers", handlers),
-            pair("worlds", toObjectMapper(TimingHistory.worldMap.entrySet(), input -> pair(input.getValue(), input.getKey()))),
-            pair("tileentity",
-                toObjectMapper(tileEntityTypeSet, input -> pair(input.ordinal(), input.name()))),
-            pair("entity",
-                toObjectMapper(entityTypeSet, input -> pair(input.ordinal(), input.name())))
-        ));
-
-        // Information about loaded plugins
-
-        parent.put("plugins", toObjectMapper(Bukkit.getPluginManager().getPlugins(),
-                plugin -> pair(plugin.getName(), createObject(
-                    pair("version", plugin.getDescription().getVersion()),
-                    pair("description", String.valueOf(plugin.getDescription().getDescription()).trim()),
-                    pair("website", plugin.getDescription().getWebsite()),
-                    pair("authors", StringUtils.join(plugin.getDescription().getAuthors(), ", "))
-                ))));
-
-
-
-        // Information on the users Config
-
-        parent.put("config", createObject(
-            pair("server.properties", VanillaServerPropertiesTimingsExport.get()), // Gale - include server.properties in timings
-            pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
-            pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            // Gale start - Gale configuration - include in timings
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
-            pair("gale", mapAsJSON(Bukkit.spigot().getGaleConfig(), null))
-            // Gale end - Gale configuration - include in timings
-        ));
-
-        new TimingsExport(listeners, parent, history).start();
-    }
-
-    static long getCost() {
-        // Benchmark the users System.nanotime() for cost basis
-        int passes = 100;
-        TimingHandler SAMPLER1 = Timings.ofSafe("Timings Sampler 1");
-        TimingHandler SAMPLER2 = Timings.ofSafe("Timings Sampler 2");
-        TimingHandler SAMPLER3 = Timings.ofSafe("Timings Sampler 3");
-        TimingHandler SAMPLER4 = Timings.ofSafe("Timings Sampler 4");
-        TimingHandler SAMPLER5 = Timings.ofSafe("Timings Sampler 5");
-        TimingHandler SAMPLER6 = Timings.ofSafe("Timings Sampler 6");
-
-        long start = System.nanoTime();
-        for (int i = 0; i < passes; i++) {
-            SAMPLER1.startTiming();
-            SAMPLER2.startTiming();
-            SAMPLER3.startTiming();
-            SAMPLER3.stopTiming();
-            SAMPLER4.startTiming();
-            SAMPLER5.startTiming();
-            SAMPLER6.startTiming();
-            SAMPLER6.stopTiming();
-            SAMPLER5.stopTiming();
-            SAMPLER4.stopTiming();
-            SAMPLER2.stopTiming();
-            SAMPLER1.stopTiming();
-        }
-        long timingsCost = (System.nanoTime() - start) / passes / 6;
-        SAMPLER1.reset(true);
-        SAMPLER2.reset(true);
-        SAMPLER3.reset(true);
-        SAMPLER4.reset(true);
-        SAMPLER5.reset(true);
-        SAMPLER6.reset(true);
-        return timingsCost;
-    }
-
-    public static JSONObject mapAsJSON(ConfigurationSection config, String parentKey) { // Gale - Gale configuration
-
-        JSONObject object = new JSONObject();
-        for (String key : config.getKeys(false)) {
-            String fullKey = (parentKey != null ? parentKey + "." + key : key);
-            if (fullKey.equals("database") || fullKey.equals("settings.bungeecord-addresses") || TimingsManager.hiddenConfigs.contains(fullKey) || key.startsWith("seed-") || key.equals("worldeditregentempworld") || key.equals("feature-seeds")) {
-                continue;
-            }
-            final Object val = config.get(key);
-
-            object.put(key, valAsJSON(val, fullKey));
-        }
-        return object;
-    }
-
-    private static Object valAsJSON(Object val, final String parentKey) {
-        if (!(val instanceof MemorySection)) {
-            if (val instanceof List) {
-                Iterable<Object> v = (Iterable<Object>) val;
-                return toArrayMapper(v, input -> valAsJSON(input, parentKey));
-            } else {
-                return String.valueOf(val);
-            }
-        } else {
-            return mapAsJSON((ConfigurationSection) val, parentKey);
-        }
-    }
-
-    @Override
-    public void run() {
-        out.put("data", toArrayMapper(history, TimingHistory::export));
-
-
-        String response = null;
-        String timingsURL = null;
-        try {
-            HttpURLConnection con = (HttpURLConnection) new URL(TimingsManager.url + "post").openConnection();
-            con.setDoOutput(true);
-            String hostName = "BrokenHost";
-            try {
-                hostName = InetAddress.getLocalHost().getHostName();
-            } catch (Exception ignored) {}
-            con.setRequestProperty("User-Agent", "Paper/" + Bukkit.getUnsafe().getTimingsServerName() + "/" + hostName);
-            con.setRequestMethod("POST");
-            con.setInstanceFollowRedirects(false);
-
-            OutputStream request = new GZIPOutputStream(con.getOutputStream()) {{
-                this.def.setLevel(7);
-            }};
-
-            request.write(JSONValue.toJSONString(out).getBytes("UTF-8"));
-            request.close();
-
-            response = getResponse(con);
-
-            if (con.getResponseCode() != 302) {
-                listeners.sendMessage(text( "Upload Error: " + con.getResponseCode() + ": " + con.getResponseMessage(), NamedTextColor.RED));
-                listeners.sendMessage(text("Check your logs for more information", NamedTextColor.RED));
-                if (response != null) {
-                    Bukkit.getLogger().log(Level.SEVERE, response);
-                }
-                return;
-            }
-
-            timingsURL = con.getHeaderField("Location");
-            listeners.sendMessage(text("View Timings Report: ", NamedTextColor.GREEN).append(text(timingsURL).clickEvent(ClickEvent.clickEvent(ClickEvent.Action.OPEN_URL, timingsURL))));
-
-            if (response != null && !response.isEmpty()) {
-                Bukkit.getLogger().log(Level.INFO, "Timing Response: " + response);
-            }
-        } catch (IOException ex) {
-            listeners.sendMessage(text("Error uploading timings, check your logs for more information", NamedTextColor.RED));
-            if (response != null) {
-                Bukkit.getLogger().log(Level.SEVERE, response);
-            }
-            Bukkit.getLogger().log(Level.SEVERE, "Could not paste timings", ex);
-        } finally {
-            this.listeners.done(timingsURL);
-        }
-    }
-
-    private String getResponse(HttpURLConnection con) throws IOException {
-        InputStream is = null;
-        try {
-            is = con.getInputStream();
-            ByteArrayOutputStream bos = new ByteArrayOutputStream();
-
-            byte[] b = new byte[1024];
-            int bytesRead;
-            while ((bytesRead = is.read(b)) != -1) {
-                bos.write(b, 0, bytesRead);
-            }
-            return bos.toString();
-
-        } catch (IOException ex) {
-            listeners.sendMessage(text("Error uploading timings, check your logs for more information", NamedTextColor.RED));
-            Bukkit.getLogger().log(Level.WARNING, con.getResponseMessage(), ex);
-            return null;
-        } finally {
-            if (is != null) {
-                is.close();
-            }
-        }
-    }
-}
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
deleted file mode 100644
index 2f0d9b953802dee821cfde82d22b0567cce8ee91..0000000000000000000000000000000000000000
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package co.aikar.timings;
-
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-
-/**
- * Set of timers per world, to track world specific timings.
- */
-// TODO: Re-implement missing timers
-@Deprecated(forRemoval = true)
-public class WorldTimingsHandler {
-    public final Timing mobSpawn;
-    public final Timing doChunkUnload;
-    public final Timing doPortalForcer;
-    public final Timing scheduledBlocks;
-    public final Timing scheduledBlocksCleanup;
-    public final Timing scheduledBlocksTicking;
-    public final Timing chunkTicks;
-    public final Timing lightChunk;
-    public final Timing chunkTicksBlocks;
-    public final Timing doVillages;
-    public final Timing doChunkMap;
-    public final Timing doChunkMapUpdate;
-    public final Timing doChunkMapToUpdate;
-    public final Timing doChunkMapSortMissing;
-    public final Timing doChunkMapSortSendToPlayers;
-    public final Timing doChunkMapPlayersNeedingChunks;
-    public final Timing doChunkMapPendingSendToPlayers;
-    public final Timing doChunkMapUnloadChunks;
-    public final Timing doChunkGC;
-    public final Timing doSounds;
-    public final Timing entityRemoval;
-    public final Timing entityTick;
-    public final Timing tileEntityTick;
-    public final Timing tileEntityPending;
-    public final Timing tracker1;
-    public final Timing tracker2;
-    public final Timing doTick;
-    public final Timing tickEntities;
-    public final Timing chunks;
-    public final Timing newEntities;
-    public final Timing raids;
-    public final Timing chunkProviderTick;
-    public final Timing broadcastChunkUpdates;
-    public final Timing countNaturalMobs;
-
-    public final Timing chunkLoad;
-    public final Timing chunkLoadPopulate;
-    public final Timing syncChunkLoad;
-    public final Timing chunkLoadLevelTimer;
-    public final Timing chunkIO;
-    public final Timing chunkPostLoad;
-    public final Timing worldSave;
-    public final Timing worldSaveChunks;
-    public final Timing worldSaveLevel;
-    public final Timing chunkSaveData;
-
-
-    public final Timing miscMobSpawning;
-
-    public WorldTimingsHandler(Level server) {
-        String name = ((PrimaryLevelData) server.getLevelData()).getLevelName() + " - ";
-
-        mobSpawn = Timings.ofSafe(name + "mobSpawn");
-        doChunkUnload = Timings.ofSafe(name + "doChunkUnload");
-        scheduledBlocks = Timings.ofSafe(name + "Scheduled Blocks");
-        scheduledBlocksCleanup = Timings.ofSafe(name + "Scheduled Blocks - Cleanup");
-        scheduledBlocksTicking = Timings.ofSafe(name + "Scheduled Blocks - Ticking");
-        chunkTicks = Timings.ofSafe(name + "Chunk Ticks");
-        lightChunk = Timings.ofSafe(name + "Light Chunk");
-        chunkTicksBlocks = Timings.ofSafe(name + "Chunk Ticks - Blocks");
-        doVillages = Timings.ofSafe(name + "doVillages");
-        doChunkMap = Timings.ofSafe(name + "doChunkMap");
-        doChunkMapUpdate = Timings.ofSafe(name + "doChunkMap - Update");
-        doChunkMapToUpdate = Timings.ofSafe(name + "doChunkMap - To Update");
-        doChunkMapSortMissing = Timings.ofSafe(name + "doChunkMap - Sort Missing");
-        doChunkMapSortSendToPlayers = Timings.ofSafe(name + "doChunkMap - Sort Send To Players");
-        doChunkMapPlayersNeedingChunks = Timings.ofSafe(name + "doChunkMap - Players Needing Chunks");
-        doChunkMapPendingSendToPlayers = Timings.ofSafe(name + "doChunkMap - Pending Send To Players");
-        doChunkMapUnloadChunks = Timings.ofSafe(name + "doChunkMap - Unload Chunks");
-        doSounds = Timings.ofSafe(name + "doSounds");
-        doChunkGC = Timings.ofSafe(name + "doChunkGC");
-        doPortalForcer = Timings.ofSafe(name + "doPortalForcer");
-        entityTick = Timings.ofSafe(name + "entityTick");
-        entityRemoval = Timings.ofSafe(name + "entityRemoval");
-        tileEntityTick = Timings.ofSafe(name + "tileEntityTick");
-        tileEntityPending = Timings.ofSafe(name + "tileEntityPending");
-
-        chunkLoad = Timings.ofSafe(name + "Chunk Load");
-        chunkLoadPopulate = Timings.ofSafe(name + "Chunk Load - Populate");
-        syncChunkLoad = Timings.ofSafe(name + "Sync Chunk Load");
-        chunkLoadLevelTimer = Timings.ofSafe(name + "Chunk Load - Load Level");
-        chunkIO = Timings.ofSafe(name + "Chunk Load - DiskIO");
-        chunkPostLoad = Timings.ofSafe(name + "Chunk Load - Post Load");
-        worldSave = Timings.ofSafe(name + "World Save");
-        worldSaveLevel = Timings.ofSafe(name + "World Save - Level");
-        worldSaveChunks = Timings.ofSafe(name + "World Save - Chunks");
-        chunkSaveData = Timings.ofSafe(name + "Chunk Save - Data");
-
-        tracker1 = Timings.ofSafe(name + "tracker stage 1");
-        tracker2 = Timings.ofSafe(name + "tracker stage 2");
-        doTick = Timings.ofSafe(name + "doTick");
-        tickEntities = Timings.ofSafe(name + "tickEntities");
-
-        chunks = Timings.ofSafe(name + "Chunks");
-        newEntities = Timings.ofSafe(name + "New entity registration");
-        raids = Timings.ofSafe(name + "Raids");
-        chunkProviderTick = Timings.ofSafe(name + "Chunk provider tick");
-        broadcastChunkUpdates = Timings.ofSafe(name + "Broadcast chunk updates");
-        countNaturalMobs = Timings.ofSafe(name + "Count natural mobs");
-
-
-        miscMobSpawning = Timings.ofSafe(name + "Mob spawning - Misc");
-    }
-
-    public static Timing getTickList(ServerLevel worldserver, String timingsType) {
-        return Timings.ofSafe(((PrimaryLevelData) worldserver.getLevelData()).getLevelName() + " - Scheduled " + timingsType);
-    }
-}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
index 0c3c82b28e581286b798ee58ca4193efc2faff4a..5a2a4f69995f23e799370c05f28f9353aa1a1d39 100644
--- a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
+++ b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.command.brigadier.bukkit;
 
-import co.aikar.timings.Timing;
 import com.mojang.brigadier.arguments.StringArgumentType;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.context.CommandContext;
@@ -79,17 +78,12 @@ public class BukkitCommandNode extends LiteralCommandNode<CommandSourceStack> {
             CommandSender sender = context.getSource().getSender();
 
             // Plugins do weird things to workaround normal registration
-            if (this.command.timings == null) {
-                this.command.timings = co.aikar.timings.TimingsManager.getCommandTiming(null, this.command);
-            }
 
             String content = context.getRange().get(context.getInput());
             String[] args = org.apache.commons.lang3.StringUtils.split(content, ' '); // fix adjacent spaces (from console/plugins) causing empty array elements
 
-            try (Timing ignored = this.command.timings.startTiming()) {
                 // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
                 this.command.execute(sender, this.literal, Arrays.copyOfRange(args, 1, args.length));
-            }
 
             // return true as command was handled
             return 1;
diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 4a215cec69f8fe81d55b497c0b5ff98d03f235ae..726d5cc3422368e7a2bbdb8fce7484da30e24174 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.configuration;
 
-import co.aikar.timings.MinecraftTimings;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.configuration.constraint.Constraints;
 import io.papermc.paper.configuration.type.number.IntOr;
@@ -91,39 +90,6 @@ public class GlobalConfiguration extends ConfigurationPart {
         public boolean useDisplayNameInQuitMessage = false;
     }
 
-    @Deprecated(forRemoval = true)
-    public Timings timings;
-
-    @Deprecated(forRemoval = true)
-    public class Timings extends ConfigurationPart {
-        // Gale start - recommend disabling timings on startup
-        public boolean enabled = false; // Gale - set default value to false
-        public boolean warnIfEnabled = true;
-        // Gale end - recommend disabling timings on startup
-        public boolean verbose = true;
-        public String url = "https://timin.gs/"; // Gale - use timin.gs by default
-        public boolean serverNamePrivacy = false;
-        public List<String> hiddenConfigEntries = List.of(
-            "database",
-            "proxies.velocity.secret"
-        );
-        public int historyInterval = 300;
-        public int historyLength = 3600;
-        public String serverName = "Unknown Server";
-
-        @PostProcess
-        private void postProcess() {
-            // Gale start - recommend disabling timings on startup
-            if (enabled && warnIfEnabled) {
-                net.minecraft.server.MinecraftServer.LOGGER.warn("To improve performance, we recommend setting timings.enabled to false in paper-global.yml");
-                net.minecraft.server.MinecraftServer.LOGGER.warn("(If you do this, timings will not start on server startup, but you can still start timings later by using /timings on)");
-                net.minecraft.server.MinecraftServer.LOGGER.warn("If you would like to disable this message, set timings.warn-if-enabled to false in paper-global.yml.");
-            }
-            // Gale end - recommend disabling timings on startup
-            MinecraftTimings.processConfig(this);
-        }
-    }
-
     public Proxies proxies;
 
     public class Proxies extends ConfigurationPart {
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index 7ce9ebba8ce304d1f3f21d4f15ee5f3560d7700b..a1c9726d25479b5326fe2fa2b0f5a98d6b2da4c5 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.plugin.manager;
 
-import co.aikar.timings.TimedEventExecutor;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerEventException;
 import com.google.common.collect.Sets;
@@ -95,7 +94,6 @@ class PaperEventManager {
             throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");
         }
 
-        executor = new TimedEventExecutor(executor, plugin, null, event);
         this.getEventListeners(event).register(new RegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
     }
 
@@ -182,7 +180,7 @@ class PaperEventManager {
                 }
             }
 
-            EventExecutor executor = new TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass);
+            EventExecutor executor = EventExecutor.create(method, eventClass);
             eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
         }
         return ret;
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 097500a59336db1bbfffcd1aa4cff7a8586e46ec..f06076864582ed153c6154fd7f3e9101bf21c4ac 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -232,7 +232,7 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
 
     @Override
     public boolean useTimings() {
-        return co.aikar.timings.Timings.isTimingsEnabled();
+        return false; // Leaf - Remove Timings
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/network/protocol/PacketUtils.java b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
index d0d36a57ec4896bcb74970f8fb24d8f3e17db133..f7197f1347251a37dd0f6d9ffa2f09bc3a4e1233 100644
--- a/src/main/java/net/minecraft/network/protocol/PacketUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
@@ -31,8 +31,7 @@ public class PacketUtils {
             engine.executeIfPossible(() -> {
                 if (listener instanceof ServerCommonPacketListenerImpl serverCommonPacketListener && serverCommonPacketListener.processedDisconnect) return; // CraftBukkit - Don't handle sync packets for kicked players
                 if (listener.shouldHandleMessage(packet)) {
-                    co.aikar.timings.Timing timing = co.aikar.timings.MinecraftTimings.getPacketTiming(packet); // Paper - timings
-                    try (co.aikar.timings.Timing ignored = timing.startTiming()) { // Paper - timings
+                    try {
                         packet.handle(listener);
                     } catch (Exception exception) {
                         if (exception instanceof ReportedException) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 12f41f1bc9ea5f5be7e32236aae380f633abee0e..0eac388d53d65d6dbd6900040be4d661cc799765 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -187,8 +187,6 @@ import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
-
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, ChunkIOErrorReporter, CommandSource, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer { // Paper - rewrite chunk system
 
     public static final int SERVER_THREAD_PRIORITY = Integer.getInteger("gale.thread.priority.server", -1); // Gale - server thread priority environment variable
@@ -975,7 +973,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         MinecraftServer.LOGGER.info("Stopping server");
         Commands.COMMAND_SENDING_POOL.shutdownNow(); // Paper - Perf: Async command map building; Shutdown and don't bother finishing
-        MinecraftTimings.stopServer(); // Paper
         // Purpur start
         if (upnp) {
             if (dev.omega24.upnp4j.UPnP4J.close(this.getPort(), dev.omega24.upnp4j.util.Protocol.TCP)) {
@@ -1434,7 +1431,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     protected void waitUntilNextTick() {
-        //this.executeAll(); // Paper - move this into the tick method for timings
         long tickOversleepStart = System.nanoTime(); // Gale - YAPFA - last tick time
         this.managedBlock(() -> {
             return !this.canSleepForTickNoOversleep(); // Paper - move oversleep into full server tick
@@ -1545,15 +1541,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public void tickServer(BooleanSupplier shouldKeepTicking) {
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTimingFullServerTick(); // Paper // Gale - final timings calls
         long i = Util.getNanos();
 
         // Paper start - move oversleep into full server tick
-        isOversleep = true;MinecraftTimings.serverOversleep.startTiming();
+        isOversleep = true;
         this.managedBlock(() -> {
             return !this.canOversleep();
         });
-        isOversleep = false;MinecraftTimings.serverOversleep.stopTiming();
+        isOversleep = false;
         // Paper end
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper - Server Tick Events
 
@@ -1575,11 +1570,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             MinecraftServer.LOGGER.debug("Autosave finished");
         }
         io.papermc.paper.util.CachedLists.reset(); // Paper
-        // Paper start - move executeAll() into full server tick timing
-        try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
-            this.runAllTasks();
-        }
-        // Paper end
+        this.runAllTasks();
         // Paper start - Server Tick Events
         long endTime = System.nanoTime();
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
@@ -1599,7 +1590,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper end - Add tick times API and /mspt command
         this.logTickMethodTime(i);
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTimingFullServerTick(); // Paper // Gale - final timings calls
     }
 
     private void logTickMethodTime(long tickStartTime) {
@@ -1670,9 +1660,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.getPlayerList().getPlayers().forEach((entityplayer) -> {
             entityplayer.connection.suspendFlushing();
         });
-        MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper
         this.server.getScheduler().mainThreadHeartbeat(this.tickCount); // CraftBukkit
-        MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper
         // Paper start - Folia scheduler API
         ((io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler) Bukkit.getGlobalRegionScheduler()).tick();
         getAllLevels().forEach(level -> {
@@ -1688,20 +1676,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         });
         // Paper end - Folia scheduler API
         io.papermc.paper.adventure.providers.ClickCallbackProviderImpl.CALLBACK_MANAGER.handleQueue(this.tickCount); // Paper
-        MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper
         this.getFunctions().tick();
-        MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
         //Iterator iterator = this.getAllLevels().iterator(); // Paper - Throw exception on world create while being ticked; moved down
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
-        MinecraftTimings.processQueueTimer.startTiming(); // Spigot
         while (!this.processQueue.isEmpty()) {
             this.processQueue.remove().run();
         }
-        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
 
-        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - Perf: Optimize time updates
         for (final ServerLevel level : this.getAllLevels()) {
@@ -1721,7 +1704,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
         }
         // Paper end - Perf: Optimize time updates
-        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
 
         this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked
         Iterator iterator = this.getAllLevels().iterator(); // Paper - Throw exception on world create while being ticked; move down
@@ -1739,9 +1721,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // CraftBukkit end */
 
             try {
-                worldserver.timings.doTick.startTiming(); // Spigot
                 worldserver.tick(shouldKeepTicking);
-                worldserver.timings.doTick.stopTiming(); // Spigot
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
 
@@ -1753,21 +1733,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
 
-        MinecraftTimings.connectionTimer.startTiming(); // Spigot // Paper
         this.getConnection().tick();
-        MinecraftTimings.connectionTimer.stopTiming(); // Spigot // Paper
-        MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
         this.playerList.tick();
-        MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
         if (SharedConstants.IS_RUNNING_IN_IDE && this.tickRateManager.runsNormally()) {
             GameTestTicker.SINGLETON.tick();
         }
 
-        MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
         for (int i = 0; i < this.tickables.size(); ++i) {
             ((Runnable) this.tickables.get(i)).run();
         }
-        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
         iterator = this.playerList.getPlayers().iterator();
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index ca31ceb08099324df560bfc4f7888a509ad75307..b38470108f0842ee65cb55ff7e376105cc7ba2f6 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -69,7 +69,6 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.craftbukkit.util.TerminalCompletionHandler;
 import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
@@ -560,7 +559,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     }
 
     public void handleConsoleInputs() {
-        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
         // Paper start - Perf: use proper queue
         ConsoleInput servercommand;
         while ((servercommand = this.serverCommandQueue.poll()) != null) {
@@ -576,8 +574,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.server.dispatchServerCommand(this.console, servercommand);
             // CraftBukkit end
         }
-
-        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     @Override
@@ -849,23 +845,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             if (event.isCancelled()) {
                 return;
             }
-            // Paper start
             command.set(event.getCommand());
-            if (event.getCommand().toLowerCase(java.util.Locale.ROOT).startsWith("timings") && event.getCommand().toLowerCase(java.util.Locale.ROOT).matches("timings (report|paste|get|merged|seperate)")) {
-                org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
-                Waitable<String> waitable = new Waitable<>() {
-                    @Override
-                    protected String evaluate() {
-                        return sender.getBuffer();
-                    }
-                };
-                waitableArray[0] = waitable;
-                co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
-            } else {
-            // Paper end
             ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), wrapper);
             this.server.dispatchServerCommand(event.getSender(), serverCommand);
-            } // Paper
         });
         // Paper start
         if (waitableArray[0] != null) {
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 79057c2db0e6163f2d5466f50716a4ce230bfdf2..55ae1991316e5e67159c5babbc501190919dde1e 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1,6 +1,5 @@
 package net.minecraft.server.level;
 
-import co.aikar.timings.Timing; // Paper
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 import com.google.common.collect.Iterables;
@@ -950,7 +949,6 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         List<ServerPlayer> list = Lists.newArrayList();
         List<ServerPlayer> list1 = this.level.players();
         ObjectIterator objectiterator = this.entityMap.values().iterator();
-        level.timings.tracker1.startTiming(); // Paper
 
         ChunkMap.TrackedEntity playerchunkmap_entitytracker;
 
@@ -975,17 +973,14 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 playerchunkmap_entitytracker.serverEntity.sendChanges();
             }
         }
-        level.timings.tracker1.stopTiming(); // Paper
 
         if (!list.isEmpty()) {
             objectiterator = this.entityMap.values().iterator();
 
-            level.timings.tracker2.startTiming(); // Paper
             while (objectiterator.hasNext()) {
                 playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
                 playerchunkmap_entitytracker.updatePlayers(list);
             }
-            level.timings.tracker2.stopTiming(); // Paper
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 023533e9ea342c8ff0d993544c45416af88bf5ab..c60c9c6eaecadcf6c8ababd803aeeaf49befb6c7 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -356,9 +356,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
 
     public void save(boolean flush) {
         // Paper - rewrite chunk system
-        try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
         this.chunkMap.saveAllChunks(flush);
-        } // Paper - Timings
     }
 
     @Override
@@ -382,24 +380,18 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
 
     @Override
     public void tick(BooleanSupplier shouldKeepTicking, boolean tickChunks) {
-        this.level.timings.doChunkMap.startTiming(); // Spigot
         if (this.level.tickRateManager().runsNormally() || !tickChunks || this.level.spigotConfig.unloadFrozenChunks) { // Spigot
             this.distanceManager.purgeStaleTickets();
         }
 
         this.runDistanceManagerUpdates();
-        this.level.timings.doChunkMap.stopTiming(); // Spigot
         if (tickChunks) {
-            this.level.timings.chunks.startTiming(); // Paper - timings
             ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getPlayerChunkLoader().tick(); // Paper - rewrite chunk system
             this.tickChunks();
-            this.level.timings.chunks.stopTiming(); // Paper - timings
             this.chunkMap.tick();
         }
 
-        this.level.timings.doChunkUnload.startTiming(); // Spigot
         this.chunkMap.tick(shouldKeepTicking);
-        this.level.timings.doChunkUnload.stopTiming(); // Spigot
         this.clearCache();
     }
 
@@ -411,7 +403,6 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         if (!this.level.isDebug()) {
             List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(this.chunkMap.size());
             Iterator iterator = this.chunkMap.getChunks().iterator();
-            if (this.level.getServer().tickRateManager().runsNormally()) this.level.timings.chunkTicks.startTiming(); // Paper
 
             while (iterator.hasNext()) {
                 ChunkHolder playerchunk = (ChunkHolder) iterator.next();
@@ -429,7 +420,6 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
                 boolean flagAndHasNaturalSpawn = flag && this.anySpawnCategoryIsSpawnedThisTick();
                 if (flagAndHasNaturalSpawn) {
                 // Gale end - MultiPaper - skip unnecessary mob spawning computations
-                this.level.timings.countNaturalMobs.startTiming(); // Paper - timings
                 int k = this.distanceManager.getNaturalSpawnChunkCount();
                 // Paper start - Optional per player mob spawns
                 int naturalSpawnChunkCount = k;
@@ -453,7 +443,6 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
                     spawnercreature_d = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false);
                 }
                 // Paper end - Optional per player mob spawns
-                this.level.timings.countNaturalMobs.stopTiming(); // Paper - timings
 
                 this.lastSpawnState = spawnercreature_d;
                 // Gale start - MultiPaper - skip unnecessary mob spawning computations
@@ -493,19 +482,14 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
                         }
                     }
                 }
-                this.level.timings.chunkTicks.stopTiming(); // Paper
 
                 if (flag) {
-                    try (co.aikar.timings.Timing ignored = this.level.timings.miscMobSpawning.startTiming()) { // Paper - timings
                     this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
-                    } // Paper - timings
                 }
             }
 
             list.forEach((chunkproviderserver_a1) -> {
-                this.level.timings.broadcastChunkUpdates.startTiming(); // Paper - timing
                 chunkproviderserver_a1.holder.broadcastChanges(chunkproviderserver_a1.chunk);
-                this.level.timings.broadcastChunkUpdates.stopTiming(); // Paper - timing
             });
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 528e6e37b5552fe8179b472ec5fbbb90fa1b7b5b..b5acade29b8fce1bc9c960f0395cf1fabd4d49ac 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1,7 +1,6 @@
 package net.minecraft.server.level;
 
 import com.google.common.annotations.VisibleForTesting;
-import co.aikar.timings.TimingHistory; // Paper
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
@@ -682,27 +681,19 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             this.tickTime();
         }
 
-        this.timings.scheduledBlocks.startTiming(); // Paper
         if (!this.isDebug() && flag) {
             j = this.getGameTime();
             this.blockTicks.tick(j, paperConfig().environment.maxBlockTicks, this::tickBlock); // Paper - configurable max block ticks
             this.fluidTicks.tick(j, paperConfig().environment.maxFluidTicks, this::tickFluid); // Paper - configurable max fluid ticks
         }
-        this.timings.scheduledBlocks.stopTiming(); // Paper
 
         if (flag) {
-            this.timings.raids.startTiming(); // Paper - timings
             this.raids.tick();
-            this.timings.raids.stopTiming(); // Paper - timings
         }
 
-        this.timings.chunkProviderTick.startTiming(); // Paper - timings
         this.getChunkSource().tick(shouldKeepTicking, true);
-        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
         if (flag) {
-            this.timings.doSounds.startTiming(); // Spigot
             this.runBlockEvents();
-            this.timings.doSounds.stopTiming(); // Spigot
         }
 
         this.handlingTick = false;
@@ -713,13 +704,11 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         }
 
         if (flag1 || this.emptyTime++ < 300) {
-            this.timings.tickEntities.startTiming(); // Spigot
             if (this.dragonFight != null && flag) {
                 this.dragonFight.tick();
             }
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-            this.timings.entityTick.startTiming(); // Spigot
             this.entityTickList.forEach((entity) -> {
                 entity.activatedPriorityReset = false; // Pufferfish - DAB
                 if (!entity.isRemoved()) {
@@ -743,8 +732,6 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                     }
                 }
             });
-            this.timings.entityTick.stopTiming(); // Spigot
-            this.timings.tickEntities.stopTiming(); // Spigot
             this.tickBlockEntities();
         }
 
@@ -869,7 +856,6 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         }
         } // Paper - Option to disable ice and snow
 
-        timings.chunkTicksBlocks.startTiming(); // Paper
         if (randomTickSpeed > 0) {
             LevelChunkSection[] achunksection = chunk.getSections();
 
@@ -899,8 +885,6 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 }
             }
         }
-
-        timings.chunkTicksBlocks.stopTiming(); // Paper
     }
 
     @VisibleForTesting
@@ -1200,31 +1184,21 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     }
 
     public void tickNonPassenger(Entity entity) {
-        ++TimingHistory.entityTicks; // Paper - timings
         // Spigot start
-        co.aikar.timings.Timing timer; // Paper
         /*if (!org.spigotmc.ActivationRange.checkIfActive(entity)) { // Paper - comment out - EAR 2, reimplement below
             entity.tickCount++;
-            timer = entity.getType().inactiveTickTimer.startTiming(); try { // Paper - timings
             entity.inactiveTick();
-            } finally { timer.stopTiming(); } // Paper
             return;
         }*/ // Paper - comment out EAR 2
         // Spigot end
-        // Paper start- timings
         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
-        timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper
-        try {
-        // Paper end - timings
         entity.setOldPosAndRot();
 
         ++entity.tickCount;
         if (isActive) { // Paper - EAR 2
-            TimingHistory.activatedEntityTicks++;
         entity.tick();
         entity.postTick(); // CraftBukkit
         } else { entity.inactiveTick(); } // Paper - EAR 2
-        } finally { timer.stopTiming(); } // Paper - timings
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1232,8 +1206,6 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
             this.tickPassenger(entity, entity1);
         }
-        // } finally { timer.stopTiming(); } // Paper - timings - move up
-
     }
 
     private void tickPassenger(Entity vehicle, Entity passenger) {
@@ -1241,9 +1213,6 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             if (passenger instanceof Player || this.entityTickList.contains(passenger)) {
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(passenger);
-                co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper
-                try {
-                // Paper end
                 passenger.setOldPosAndRot();
                 ++passenger.tickCount;
 
@@ -1265,8 +1234,6 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
                     this.tickPassenger(passenger, entity2);
                 }
-
-            } finally { timer.stopTiming(); }// Paper - EAR2 timings
             }
         } else {
             passenger.stopRiding();
@@ -1288,7 +1255,6 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
         if (!savingDisabled) {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(this.getWorld())); // CraftBukkit
-            try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
             if (progressListener != null) {
                 progressListener.progressStartNoAbort(Component.translatable("menu.savingLevel"));
             }
@@ -1298,10 +1264,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 progressListener.progressStage(Component.translatable("menu.savingChunks"));
             }
 
-                timings.worldSaveChunks.startTiming(); // Paper
             if (!close) { chunkproviderserver.save(flush); } // Paper - add close param
-                timings.worldSaveChunks.stopTiming(); // Paper
-            }// Paper
             // Paper - rewrite chunk system
 
         }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index d2153c3e909e7e75529ce6e41d649bf54b48752b..33fd3c88f84a5d6f7f7c0212f364a83870c88fc7 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1,6 +1,5 @@
 package net.minecraft.server.players;
 
-import co.aikar.timings.MinecraftTimings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -1282,11 +1281,9 @@ public abstract class PlayerList {
 
     public void saveAll() {
         io.papermc.paper.util.MCUtil.ensureMain("Save Players" , () -> { // Paper - Ensure main
-        MinecraftTimings.savePlayers.startTiming(); // Paper
         for (int i = 0; i < this.players.size(); ++i) {
             this.save(this.players.get(i));
         }
-        MinecraftTimings.savePlayers.stopTiming(); // Paper
         return null; }); // Paper - ensure main
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index d3de0362dd1ef3954d05c4d8fa56a25edfe1bb2b..6ac3dfab99cfb0b51c81cc20e71da1261a8c567c 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -356,10 +356,6 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
         this(factory, spawnGroup, saveable, summonable, fireImmune, spawnableFarFromPlayer, canSpawnInside, dimensions, spawnBoxScale, maxTrackDistance, trackTickInterval, requiredFeatures, "custom");
     }
     public EntityType(EntityType.EntityFactory<T> factory, MobCategory spawnGroup, boolean saveable, boolean summonable, boolean fireImmune, boolean spawnableFarFromPlayer, ImmutableSet<Block> canSpawnInside, EntityDimensions dimensions, float spawnBoxScale, int maxTrackDistance, int trackTickInterval, FeatureFlagSet requiredFeatures, String id) {
-        this.tickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "tick");
-        this.inactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "inactiveTick");
-        this.passengerTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerTick");
-        this.passengerInactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerInactiveTick");
         // Paper end
         this.builtInRegistryHolder = BuiltInRegistries.ENTITY_TYPE.createIntrusiveHolder(this);
         this.factory = factory;
@@ -729,12 +725,6 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
         return this.updateInterval;
     }
 
-    // Paper start - timings
-    public final co.aikar.timings.Timing tickTimer;
-    public final co.aikar.timings.Timing inactiveTickTimer;
-    public final co.aikar.timings.Timing passengerTickTimer;
-    public final co.aikar.timings.Timing passengerInactiveTickTimer;
-    // Paper end
     public boolean trackDeltas() {
         return this != EntityType.PLAYER && this != EntityType.LLAMA_SPIT && this != EntityType.WITHER && this != EntityType.BAT && this != EntityType.ITEM_FRAME && this != EntityType.GLOW_ITEM_FRAME && this != EntityType.LEASH_KNOT && this != EntityType.PAINTING && this != EntityType.END_CRYSTAL && this != EntityType.EVOKER_FANGS;
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index 9379dd4056018b52c93ed4888dcdc94579bd9691..c6a7bb3e710b0e3f7e00a11fa5057a24aee8d7a3 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -14,10 +14,9 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
     private long endTimestamp;
     private final int minDuration;
     private final int maxDuration;
-    // Paper start - configurable behavior tick rate and timings
+    // Paper start - configurable behavior tick rate
     private final String configKey;
-    private final co.aikar.timings.Timing timing;
-    // Paper end - configurable behavior tick rate and timings
+    // Paper end - configurable behavior tick rate
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> requiredMemoryState) {
         this(requiredMemoryState, 60);
@@ -31,15 +30,14 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
         this.minDuration = minRunTime;
         this.maxDuration = maxRunTime;
         this.entryCondition = requiredMemoryState;
-        // Paper start - configurable behavior tick rate and timings
+        // Paper start - configurable behavior tick rate
         String key = io.papermc.paper.util.MappingEnvironment.reobf() ? io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(this.getClass().getName()) : this.getClass().getName();
         int lastSeparator = key.lastIndexOf('.');
         if (lastSeparator != -1) {
             key = key.substring(lastSeparator + 1);
         }
         this.configKey = key.toLowerCase(java.util.Locale.ROOT);
-        this.timing = co.aikar.timings.MinecraftTimings.getBehaviorTimings(configKey);
-        // Paper end - configurable behavior tick rate and timings
+        // Paper end - configurable behavior tick rate
     }
 
     @Override
@@ -49,19 +47,17 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
 
     @Override
     public final boolean tryStart(ServerLevel world, E entity, long time) {
-        // Paper start - configurable behavior tick rate and timings
+        // Paper start - configurable behavior tick rate
         int tickRate = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.behavior.get(entity.getType(), this.configKey), -1);
         if (tickRate > -1 && time < this.endTimestamp + tickRate) {
             return false;
         }
-        // Paper end - configurable behavior tick rate and timings
+        // Paper end - configurable behavior tick rate
         if (this.hasRequiredMemories(entity) && this.checkExtraStartConditions(world, entity)) {
             this.status = Behavior.Status.RUNNING;
             int i = this.minDuration + world.getRandom().nextInt(this.maxDuration + 1 - this.minDuration);
             this.endTimestamp = time + (long)i;
-            this.timing.startTiming(); // Paper - behavior timings
             this.start(world, entity, time);
-            this.timing.stopTiming(); // Paper - behavior timings
             return true;
         } else {
             return false;
@@ -73,13 +69,11 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
 
     @Override
     public final void tickOrStop(ServerLevel world, E entity, long time) {
-        this.timing.startTiming(); // Paper - behavior timings
         if (!this.timedOut(time) && this.canStillUse(world, entity, time)) {
             this.tick(world, entity, time);
         } else {
             this.doStop(world, entity, time);
         }
-        this.timing.stopTiming(); // Paper - behavior timings
     }
 
     protected void tick(ServerLevel world, E entity, long time) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index 85b4b24361e785acf75571ff98f924c00ae80748..ac67dd7a30616fe70f73426e332972b7b942e91e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -26,20 +26,18 @@ public abstract class Sensor<E extends LivingEntity> {
         .ignoreInvisibilityTesting();
     private final int scanRate;
     private long timeToTick;
-    // Paper start - configurable sensor tick rate and timings
+    // Paper start - configurable sensor tick rate
     private final String configKey;
-    private final co.aikar.timings.Timing timing;
     // Paper end
 
     public Sensor(int senseInterval) {
-        // Paper start - configurable sensor tick rate and timings
+        // Paper start - configurable sensor tick rate
         String key = io.papermc.paper.util.MappingEnvironment.reobf() ? io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(this.getClass().getName()) : this.getClass().getName();
         int lastSeparator = key.lastIndexOf('.');
         if (lastSeparator != -1) {
             key = key.substring(lastSeparator + 1);
         }
         this.configKey = key.toLowerCase(java.util.Locale.ROOT);
-        this.timing = co.aikar.timings.MinecraftTimings.getSensorTimings(configKey, senseInterval);
         // Paper end
         this.scanRate = senseInterval;
         this.timeToTick = (long)RANDOM.nextInt(senseInterval);
@@ -51,12 +49,10 @@ public abstract class Sensor<E extends LivingEntity> {
 
     public final void tick(ServerLevel world, E entity) {
         if (--this.timeToTick <= 0L) {
-            // Paper start - configurable sensor tick rate and timings
+            // Paper start - configurable sensor tick rate
             this.timeToTick = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), this.scanRate);
-            this.timing.startTiming();
             // Paper end
             this.doTick(world, entity);
-            this.timing.stopTiming(); // Paper - sensor timings
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index e86c8972de653252ae14a8d483941bda69913884..395ccbe442e9c57d11f3f7dc4381b8f6458ad392 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -176,7 +176,6 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
-    public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
@@ -400,7 +399,6 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
             public void onBorderSetDamageSafeZOne(WorldBorder border, double safeZoneRadius) {}
         });
         // CraftBukkit end
-        this.timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
         this.entityLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.entityMaxTickTime);
         this.tileLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.tileMaxTickTime);
         this.entityLookup = new ca.spottedleaf.moonrise.patches.chunk_system.level.entity.dfl.DefaultEntityLookup(this); // Paper - rewrite chunk system
@@ -999,15 +997,12 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     }
 
     protected void tickBlockEntities() {
-        this.timings.tileEntityPending.startTiming(); // Spigot
         this.tickingBlockEntities = true;
         if (!this.pendingBlockEntityTickers.isEmpty()) {
             this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
             this.pendingBlockEntityTickers.clear();
         }
-        this.timings.tileEntityPending.stopTiming(); // Spigot
 
-        this.timings.tileEntityTick.startTiming(); // Spigot
         // Spigot start
         // Iterator<TickingBlockEntity> iterator = this.blockEntityTickers.iterator();
         boolean flag = this.tickRateManager().runsNormally();
@@ -1031,9 +1026,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         }
         this.blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075
 
-        this.timings.tileEntityTick.stopTiming(); // Spigot
         this.tickingBlockEntities = false;
-        co.aikar.timings.TimingHistory.tileEntityTicks += this.blockEntityTickers.size(); // Paper
         this.spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index d490429ddbb8cd82aeda5e03540075c9167b095e..d556089907bb695a9d87df1961ef0b0ae4382cad 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -127,7 +127,6 @@ public final class NaturalSpawner {
     }
 
     public static void spawnForChunk(ServerLevel world, LevelChunk chunk, NaturalSpawner.SpawnState info, boolean spawnAnimals, boolean spawnMonsters, boolean rareSpawn) {
-        world.timings.mobSpawn.startTiming(); // Spigot
         MobCategory[] aenumcreaturetype = NaturalSpawner.SPAWNING_CATEGORIES;
         int i = aenumcreaturetype.length;
 
@@ -179,8 +178,6 @@ public final class NaturalSpawner {
                 // Paper end - Optional per player mob spawns
             }
         }
-
-        world.timings.mobSpawn.stopTiming(); // Spigot
     }
 
     // Paper start - Add mobcaps commands
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index c9c255283dab251de150c65b121919cc827ab02a..7248b72430d5ff047e3150a57f26592b76e99fa5 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -107,13 +107,6 @@ public class Block extends BlockBehaviour implements ItemLike {
             this != Blocks.STRUCTURE_BLOCK &&
             this != Blocks.JIGSAW;
     }
-    public co.aikar.timings.Timing timing;
-    public co.aikar.timings.Timing getTiming() {
-        if (timing == null) {
-            timing = co.aikar.timings.MinecraftTimings.getBlockTiming(this);
-        }
-        return timing;
-    }
     // Paper end
     @Nullable
     private String descriptionId;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index cd0e43f4c53a746dd6183a8406269f9b11ad3571..54657ac895fb2fa9c58910d5421f0082d140cfed 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -33,14 +33,9 @@ import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.inventory.InventoryHolder;
 // CraftBukkit end
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
-import co.aikar.timings.MinecraftTimings; // Paper
-import co.aikar.timings.Timing; // Paper
-
 public abstract class BlockEntity {
     static boolean ignoreTileUpdates; // Paper - Perf: Optimize Hoppers
 
-    public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
     public CraftPersistentDataContainer persistentDataContainer;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 5752576087e5ff411ff8c89fde7a761083945c23..95f306d6d896e6aa4ada7ee20880ed862e0e48d8 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -622,7 +622,6 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
             ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(this.locX, this.locZ).getEntityChunk().callEntitiesLoadEvent(); // Paper - rewrite chunk system
 
             if (this.needsDecoration) {
-                try (co.aikar.timings.Timing ignored = this.level.timings.chunkLoadPopulate.startTiming()) { // Paper
                 this.needsDecoration = false;
                 java.util.Random random = new java.util.Random();
                 random.setSeed(this.level.getSeed());
@@ -642,7 +641,6 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
                     }
                 }
                 server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
-                } // Paper
             }
         }
     }
@@ -979,7 +977,6 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
 
                 if (LevelChunk.this.isTicking(blockposition)) {
                     try {
-                        this.blockEntity.tickTimer.startTiming(); // Spigot
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
                         if (this.blockEntity.getType().isValid(iblockdata)) {
@@ -1002,14 +999,9 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
                         net.minecraft.world.level.chunk.LevelChunk.this.level.getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, throwable))); // Paper - ServerExceptionEvent
                         LevelChunk.this.removeBlockEntity(this.getPos());
                         // Paper end - Prevent block entity and entity crashes
-                        // Spigot start
-                    } finally {
-                        this.blockEntity.tickTimer.stopTiming();
-                        // Spigot end
                     }
                 }
             }
-
         }
 
         @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d10c10907cefc06afff7e0f4c4cbbca352410c25..ec341e053e8eb539d4401161245039c90609138c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -477,7 +477,6 @@ public final class CraftServer implements Server {
         this.saveCommandsConfig();
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
-        //this.pluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling")); // Paper - we already moved this
         this.overrideSpawnLimits();
         console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
         this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 006adb2adb27c497ede69f87e78bc3e34499cbf8..4ee1c3461d21feab3a54e76a7c2ab80b6ea2ab38 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.scheduler;
 
-import co.aikar.timings.MinecraftTimings; // Paper
 import com.google.common.base.Preconditions;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.ArrayList;
@@ -304,7 +303,7 @@ public class CraftScheduler implements BukkitScheduler {
                         }
                         return false;
                     }
-                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer();}}; // Paper
+                });
         this.handle(task, 0L);
         for (CraftTask taskPending = this.head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -344,7 +343,7 @@ public class CraftScheduler implements BukkitScheduler {
                             }
                         }
                     }
-                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer(plugin);}}; // Paper
+                });
         this.handle(task, 0L);
         for (CraftTask taskPending = this.head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -515,10 +514,8 @@ public class CraftScheduler implements BukkitScheduler {
                 this.runners.remove(task.getTaskId());
             }
         }
-        MinecraftTimings.bukkitSchedulerFinishTimer.startTiming(); // Paper
         this.pending.addAll(temp);
         temp.clear();
-        MinecraftTimings.bukkitSchedulerFinishTimer.stopTiming(); // Paper
         //this.debugHead = this.debugHead.getNextHead(currentTick); // Paper
     }
 
@@ -561,7 +558,6 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     void parsePending() { // Paper
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.startTiming(); // Paper
         CraftTask head = this.head;
         CraftTask task = head.getNext();
         CraftTask lastTask = head;
@@ -580,7 +576,6 @@ public class CraftScheduler implements BukkitScheduler {
             task.setNext(null);
         }
         this.head = lastTask;
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.stopTiming(); // Paper
     }
 
     private boolean isReady(final int currentTick) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index ea26d9464644b5217879b8c21b4da28e57708dcb..cee5c35ac2ba48d092f4227119c915e641a498c6 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -2,15 +2,10 @@ package org.bukkit.craftbukkit.scheduler;
 
 import java.util.function.Consumer;
 
-import co.aikar.timings.NullTimingHandler;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
-import co.aikar.timings.MinecraftTimings; // Paper
-import co.aikar.timings.Timing; // Paper
-
 public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     private volatile CraftTask next = null;
@@ -31,7 +26,6 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     private long nextRun;
     public final Runnable rTask; // Paper
     public final Consumer<BukkitTask> cTask; // Paper
-    public Timing timings; // Paper
     private final Plugin plugin;
     private final int id;
     private final long createdAt = System.nanoTime();
@@ -50,12 +44,10 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this.rTask = (Runnable) task;
         this.cTask = null;
         this.plugin = CraftScheduler.MINECRAFT;
-        this.taskName = taskName;
         this.internal = true;
         this.id = id;
         this.period = CraftTask.NO_REPEATING;
         this.taskName = taskName;
-        this.timings = MinecraftTimings.getInternalTaskName(taskName);
     }
     // Paper end
 
@@ -76,7 +68,6 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         }
         this.id = id;
         this.period = period;
-        timings = task != null ? MinecraftTimings.getPluginTaskTimings(this, period) : NullTimingHandler.NULL; // Paper
     }
 
     @Override
@@ -96,13 +87,11 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     @Override
     public void run() {
-        try (Timing ignored = timings.startTiming()) { // Paper
         if (this.rTask != null) {
             this.rTask.run();
         } else {
             this.cTask.accept(this);
         }
-        } // Paper
     }
 
     long getCreatedAt() {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index b3e1adeb932da9b3bed16acd94e2f16da48a7c72..e9798517b9211c50a20ea5c69603aab35f614f02 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -115,16 +115,9 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     public void forAllObjectives(ObjectiveCriteria criteria, ScoreHolder holder, Consumer<ScoreAccess> consumer) {
         // Paper start - add timings for scoreboard search
         // plugins leaking scoreboards will make this very expensive, let server owners debug it easily
-        co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.startTimingIfSync();
-        try {
-        // Paper end - add timings for scoreboard search
         for (CraftScoreboard scoreboard : this.scoreboards) {
             Scoreboard board = scoreboard.board;
             board.forAllObjectives(criteria, holder, (score) -> consumer.accept(score));
         }
-        } finally { // Paper start - add timings for scoreboard search
-            co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.stopTimingIfSync();
-        }
-        // Paper end - add timings for scoreboard search
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 4250752a95301271f09590f0140f821a0090811a..cbb510df86d7470520a007cba3b915bf0f8b6c67 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -219,9 +219,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     // ========================================================================
     // Paper start
     @Override
-    public void reportTimings() {
-        co.aikar.timings.TimingsExport.reportTimings();
-    }
+    public void reportTimings() {} // Leaf - Remove Timings
     // Paper end
 
     public static byte toLegacyData(BlockState data) {
@@ -499,7 +497,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     // Paper start
     @Override
     public String getTimingsServerName() {
-        return io.papermc.paper.configuration.GlobalConfiguration.get().timings.serverName;
+        return org.dreeam.leaf.config.modules.misc.ServerBrand.serverModName; // Leaf - Remove Timings
     }
 
     @Override
diff --git a/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java b/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java
index 9b82eb1cc56e3151ecbd526bb1064ab7ef32186b..f34d71d9e7fccb4b661475101b2c79144c65517d 100644
--- a/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java
+++ b/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java
@@ -66,41 +66,6 @@ public class GaleGlobalConfiguration extends ConfigurationPart {
         public int premiumAccountSlowLoginTimeout = -1; // Gale - make slow login timeout configurable
         public boolean ignoreNullLegacyStructureData = false; // Gale - MultiPaper - ignore null legacy structure data
 
-        public IncludeInTimingsReport includeInTimingsReport;
-
-        public class IncludeInTimingsReport extends ConfigurationPart {
-
-            // Gale start - include server.properties in timings
-            public ServerProperties serverProperties;
-            public class ServerProperties extends ConfigurationPart {
-                public boolean dataPacks = true;
-                public boolean enableRcon = false;
-                public boolean generatorSettings = true;
-                public boolean levelName = false;
-                public boolean motd = false;
-                public boolean queryPort = false;
-                public boolean rconPort = false;
-                public boolean resourcePackPrompt = false;
-                @Setting("resource-pack-and-resource-pack-sha1")
-                public boolean resourcePackAndResourcePackSha1 = false;
-                public boolean serverIp = false;
-                public boolean serverPort = false;
-                public boolean textFilteringConfig = false;
-            }
-            // Gale end - include server.properties in timings
-
-            // Gale start - include hardware specs in timings
-            public HardwareSpecs hardwareSpecs;
-            public class HardwareSpecs extends ConfigurationPart {
-                public boolean cpu = true;
-                public boolean disks = true;
-                public boolean gpus = true;
-                public boolean memory = true;
-            }
-            // Gale end - include hardware specs in timings
-
-        }
-
         public Keepalive keepalive;
         public class Keepalive extends ConfigurationPart {
             public boolean sendMultiple = true; // Gale - Purpur - send multiple keep-alive packets
diff --git a/src/main/java/org/galemc/gale/configuration/timingsexport/GaleConfigurationTimingsExport.java b/src/main/java/org/galemc/gale/configuration/timingsexport/GaleConfigurationTimingsExport.java
deleted file mode 100644
index 579c2e69d8f6ce8398eb1297d1d1ead98c9068a5..0000000000000000000000000000000000000000
--- a/src/main/java/org/galemc/gale/configuration/timingsexport/GaleConfigurationTimingsExport.java
+++ /dev/null
@@ -1,19 +0,0 @@
-// Gale - Gale configuration
-
-package org.galemc.gale.configuration.timingsexport;
-
-import co.aikar.timings.TimingsExport;
-import org.bukkit.Bukkit;
-import org.jetbrains.annotations.NotNull;
-import org.json.simple.JSONObject;
-
-public final class GaleConfigurationTimingsExport {
-
-    private GaleConfigurationTimingsExport() {}
-
-    public static @NotNull JSONObject get() {
-        var json = TimingsExport.mapAsJSON(Bukkit.spigot().getGaleConfig(), null);
-        return json;
-    }
-
-}
diff --git a/src/main/java/org/galemc/gale/configuration/timingsexport/VanillaServerPropertiesTimingsExport.java b/src/main/java/org/galemc/gale/configuration/timingsexport/VanillaServerPropertiesTimingsExport.java
deleted file mode 100644
index 139d946346594d2a59a8b2930c4eae794c880dbc..0000000000000000000000000000000000000000
--- a/src/main/java/org/galemc/gale/configuration/timingsexport/VanillaServerPropertiesTimingsExport.java
+++ /dev/null
@@ -1,129 +0,0 @@
-// Gale - include server.properties in timings
-
-package org.galemc.gale.configuration.timingsexport;
-
-import co.aikar.timings.TimingsExport;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.dedicated.DedicatedServer;
-import org.galemc.gale.configuration.GaleGlobalConfiguration;
-import org.jetbrains.annotations.NotNull;
-import org.json.simple.JSONObject;
-
-import java.util.Optional;
-
-/**
- * Exports the vanilla server.properties to a JSON object, to be included in a timings report.
- *
- * @see TimingsExport
- *
- * @author Martijn Muijsers under GPL-3.0
- */
-public final class VanillaServerPropertiesTimingsExport {
-
-    private VanillaServerPropertiesTimingsExport() {}
-
-    @SuppressWarnings("unchecked")
-    public static @NotNull JSONObject get() {
-
-        var json = new JSONObject();
-        var properties = ((DedicatedServer) MinecraftServer.getServer()).getProperties();
-        var includeConfig = GaleGlobalConfiguration.get().misc.includeInTimingsReport.serverProperties;
-
-        json.put("allow-flight", String.valueOf(properties.allowFlight));
-        json.put("allow-nether", String.valueOf(properties.allowNether));
-        json.put("broadcast-console-to-ops", String.valueOf(properties.broadcastConsoleToOps));
-        json.put("broadcast-rcon-to-ops", String.valueOf(properties.broadcastRconToOps));
-        json.put("debug", String.valueOf(properties.debug));
-        json.put("difficulty", String.valueOf(properties.difficulty));
-        json.put("enable-command-block", String.valueOf(properties.enableCommandBlock));
-        json.put("enable-jmx-monitoring", String.valueOf(properties.enableJmxMonitoring));
-        json.put("enable-query", String.valueOf(properties.enableQuery));
-        if (includeConfig.enableRcon) {
-            json.put("enable-rcon", String.valueOf(properties.enableRcon));
-        }
-        json.put("enable-status", String.valueOf(properties.enableStatus));
-        json.put("enforce-secure-profile", String.valueOf(properties.enforceSecureProfile));
-        json.put("enforce-whitelist", String.valueOf(properties.enforceWhitelist));
-        json.put("entity-broadcast-range-percentage", String.valueOf(properties.entityBroadcastRangePercentage));
-        json.put("force-gamemode", String.valueOf(properties.forceGameMode));
-        json.put("function-permission-level", String.valueOf(properties.functionPermissionLevel));
-        json.put("gamemode", String.valueOf(properties.gamemode));
-        Optional.ofNullable(properties.worldOptions).ifPresent(worldOptions -> json.put("generate-structures", String.valueOf(worldOptions.generateStructures())));
-        if (includeConfig.generatorSettings) {
-            Optional.ofNullable(properties.worldDimensionData).ifPresent(worldDimensionData -> json.put("generator-settings", String.valueOf(worldDimensionData.generatorSettings())));
-        }
-        json.put("hardcore", String.valueOf(properties.hardcore));
-        json.put("hide-online-players", String.valueOf(properties.hideOnlinePlayers));
-        if (includeConfig.dataPacks) {
-            Optional.ofNullable(properties.initialDataPackConfiguration).ifPresent(initialDataPackConfiguration -> {
-                json.put("initial-enabled-packs", String.valueOf(initialDataPackConfiguration.getEnabled()));
-                json.put("initial-disabled-packs", String.valueOf(initialDataPackConfiguration.getDisabled()));
-            });
-        }
-        if (includeConfig.levelName) {
-            json.put("level-name", String.valueOf(properties.levelName));
-        }
-        // Note: level-seed is never included to prevent it being leaked
-//        if (includeConfig.levelSeed) {
-//            json.put("level-seed", String.valueOf(properties.levelSeed));
-//        }
-        Optional.ofNullable(properties.worldDimensionData).ifPresent(worldDimensionData -> json.put("level-type", String.valueOf(worldDimensionData.levelType())));
-        json.put("log-ips", String.valueOf(properties.logIPs));
-        json.put("max-chained-neighbor-updates", String.valueOf(properties.maxChainedNeighborUpdates));
-        json.put("max-players", String.valueOf(properties.maxPlayers));
-        json.put("max-tick-time", String.valueOf(properties.maxTickTime));
-        json.put("max-world-size", String.valueOf(properties.maxWorldSize));
-        if (includeConfig.motd) {
-            json.put("motd", String.valueOf(properties.motd));
-        }
-        json.put("network-compression-threshold", String.valueOf(properties.networkCompressionThreshold));
-        json.put("online-mode", String.valueOf(properties.onlineMode));
-        json.put("op-permission-level", String.valueOf(properties.opPermissionLevel));
-        Optional.ofNullable(properties.playerIdleTimeout).ifPresent(playerIdleTimeout -> json.put("player-idle-timeout", String.valueOf(playerIdleTimeout.get())));
-        json.put("prevent-proxy-connections", String.valueOf(properties.preventProxyConnections));
-        json.put("pvp", String.valueOf(properties.pvp));
-        if (includeConfig.queryPort) {
-            json.put("query-port", String.valueOf(properties.queryPort));
-        }
-        json.put("rate-limit", String.valueOf(properties.rateLimitPacketsPerSecond));
-        // Note: rcon-password is never included to prevent it being leaked
-//        if (includeConfig.rconPassword) {
-//            json.put("rcon-password", String.valueOf(properties.rconPassword));
-//        }
-        if (includeConfig.rconPort) {
-            json.put("rcon-port", String.valueOf(properties.queryPort));
-        }
-        properties.serverResourcePackInfo.ifPresent(serverResourcePackInfo -> {
-            json.put("require-resource-pack", String.valueOf(serverResourcePackInfo.isRequired()));
-            if (includeConfig.resourcePackAndResourcePackSha1) {
-                json.put("resource-pack", String.valueOf(serverResourcePackInfo.url()));
-                json.put("resource-pack-sha1", String.valueOf(serverResourcePackInfo.hash()));
-            }
-        });
-        if (includeConfig.resourcePackPrompt) {
-            json.put("resource-pack-prompt", String.valueOf(properties.resourcePackPrompt));
-        }
-        if (includeConfig.serverIp) {
-            json.put("server-ip", String.valueOf(properties.serverIp));
-        }
-        if (includeConfig.serverPort) {
-            json.put("server-port", String.valueOf(properties.serverPort));
-        }
-        json.put("simulation-distance", String.valueOf(properties.simulationDistance));
-        json.put("spawn-animals", String.valueOf(properties.spawnAnimals));
-        json.put("spawn-monsters", String.valueOf(properties.spawnMonsters));
-        json.put("spawn-npcs", String.valueOf(properties.spawnNpcs));
-        json.put("spawn-protection", String.valueOf(properties.spawnProtection));
-        json.put("sync-chunk-writes", String.valueOf(properties.syncChunkWrites));
-        if (includeConfig.textFilteringConfig) {
-            json.put("text-filtering-config", String.valueOf(properties.textFilteringConfig));
-        }
-        json.put("use-native-transport", String.valueOf(properties.useNativeTransport));
-        json.put("view-distance", String.valueOf(properties.viewDistance));
-        Optional.ofNullable(properties.whiteList).ifPresent(whiteList -> json.put("white-list", String.valueOf(whiteList.get())));
-
-        return json;
-
-    }
-
-}
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index bfd1999476debbd9798d51b2931dfa7e770a6e1f..87a815a942d15f2c1faf1f986bba864f9eea1351 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -34,7 +34,6 @@ import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.projectile.ThrowableProjectile;
 import net.minecraft.world.entity.projectile.ThrownTrident;
 import net.minecraft.world.entity.raid.Raider;
-import co.aikar.timings.MinecraftTimings;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
@@ -181,7 +180,6 @@ public class ActivationRange
      */
     public static void activateEntities(Level world)
     {
-        MinecraftTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
@@ -261,7 +259,6 @@ public class ActivationRange
             }
             // Paper end
         }
-        MinecraftTimings.entityActivationCheckTimer.stopTiming();
     }
 
     /**
